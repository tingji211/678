---
title: "Assignment B"
format: html
editor: visual
---

### Exercise.1 Vectors

##Q1

```{r}
#| label: 1(a-g)
#| echo: TRUE

a = c(1:20)
a
b = c(20:1)
b
c = c(1:20,19:1)
c
tmp = c(4,6,3)
tmp

e = rep(tmp,10)
e
length(which(e == 4))

f = c(e,4)
f
length(which(f == 4))

g1 = rep(4,10)
g2 = rep(6,20)
g3 = rep(3,30)
g = c(g1,g2,g3)
g
length(which(g == 4)) #for check the answer

```

##Q2

```{r}
#| label: 1.2
#| echo: TRUE
x = seq(3,6,by = 0.1)
y = exp(x) * cos(x)
y
plot(x,y) #aim to know more about function
```

##Q3

```{r}
#| label: 1.3
#| echo: TRUE
a1 = seq(3,36,by = 3)
a2 = seq(1,34,by = 3)
a = 0.1^a1*0.2^a2
a
b1 = seq(1,25)
b = 2^b1/b1
b
```

##Q4

```{r}
#| label: 1.4
#| echo: TRUE
#a
i = seq(10,100)
x = i^3+4*i^2
a = sum(x)
a
#b
i = seq(1,25)
b = sum(2^i/i+3^i/i^2)
b
```

##Q6
```{r}
set.seed(50)
xVec <- sample(0:999, 250, replace=T)
yVec <- sample(0:999, 250, replace=T)

new = xVec[-1] - yVec

```


###Exercise.2 Matrices 
#Q1

```{r}
#| label: 2.1
#| echo: TRUE
A = matrix(c(1,1,3,5,2,6,-2,-1,-3),nrow = 3,byrow = TRUE)
A%*%A%*%A
cat("A*A*A == 0")

A_new = A
A_new[,3] = A[,1] + A[,2]
A_new
```

#Q2

```{r}
#| label: 2.2
#| echo: TRUE
b = c(rep(10,15),rep(-10,15),rep(10,15))
B = matrix(b,nrow = 15,ncol = 3)
x = t(B)%*%B
x
```

#Q3

```{r}
#| label: 2.3
#| echo: TRUE
matE = matrix(0,nrow = 6,ncol = 6)
matE <- (abs(row(matE) - col(matE)) == 1) * 1
matE

```

#Q4

```{r}
#| label: 2.4
#| echo: TRUE
x <- 1:5; names(x) <- x
# Multiplication & Power Tables
x %+% x
```

#Q8.1 639,215

###Exercise 3 Simple functions

#Q1.
```{r}
#| label:3.1


#(a)
tmpFn1 <- function(xVec) {
  n <- length(xVec)
  return(xVec ^ (1:n))
}
tmpFn1(c(1,2,3,4)) #test function 1

tmpFn2 <- function(xVec) {
  n <- length(xVec)
  return(xVec ^ (1:n) / (1:n))
}
tmpFn2(c(1,2,3,4)) #test function 2


#(b)
tmpFn3 <- function(x,n){
  if (n <= 0) stop(cat("n should be a strictly positive integer!"))
  k = 1:n
  return(sum(1+sum(x^k/k)))
}
tmpFn3(1,-1) #test function 3, n < 0
tmpFn3(3,3) #test function 3
```

#Q2
```{r}
tmpFn <- function(xVec){
  k = length(xVec)-2
  s = numeric(k)
  for (i in 1:k) {
    s[i] = (xVec[i]+xVec[i+1]+xVec[i+2])/3
    # s[i] = mean(xVec[i:i+2])
  }
  return(s)
}
tmpFn( c(1:5,6:1) ) #test
```

#Q3
```{r}
tmpFn <- function(xVec){
  n = length(xVec)
  k = numeric(n)
  for (i in 1:n){
    if(xVec[i] < 0){
      k[i] = xVec[i]^2+2*xVec[i]+3
    }
    else if (xVec[i]<2 & xVec[i] >= 0){
      k[i] = xVec[i]+3
    }
    else{
      k[i] = xVec[i]^2+4*xVec[i]-7
    }
  }
  return(k)
}
x = seq(-3,3,by = 0.1)
y = tmpFn(x)
plot(x,y)

```
















